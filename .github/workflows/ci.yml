name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'eu-north-1'

jobs:
  # Job 1: Code Quality & Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint code
      run: npm run lint
      
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'

  # Job 2: Build & Test
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Install test dependencies
      run: cd tests && npm ci
      
    - name: Run unit tests
      run: cd tests && npm run test:simple
      
    - name: Run production health tests
      run: cd tests && npm run test:production
      continue-on-error: true
      env:
        NODE_ENV: production
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

  # Job 3: Infrastructure Validation
  infrastructure:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install CDK dependencies
      run: cd infrastructure && npm ci
      
    - name: Validate CDK infrastructure
      run: cd infrastructure && npx cdk synth
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}
        
    - name: Run infrastructure tests
      run: cd infrastructure && npm test

  # Job 4: Integration Tests (only for main branch)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-test, infrastructure]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install test dependencies
      run: cd tests && npm ci
      
    - name: Run CORS integration tests
      run: cd tests && npm run test:cors
      env:
        REACT_APP_API_GATEWAY_INVOKE_URL: ${{ secrets.REACT_APP_API_GATEWAY_INVOKE_URL }}
        
    - name: Run API integration tests
      run: cd tests && npm run test:api
      continue-on-error: true
      env:
        REACT_APP_API_GATEWAY_INVOKE_URL: ${{ secrets.REACT_APP_API_GATEWAY_INVOKE_URL }}

  # Job 5: Deployment Gate (final validation)
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [quality, build-test, infrastructure, integration]
    if: always()
    
    steps:
    - name: Check deployment readiness
      run: |
        echo "=== CI/CD Pipeline Results ==="
        echo "Quality: ${{ needs.quality.result }}"
        echo "Build & Test: ${{ needs.build-test.result }}"
        echo "Infrastructure: ${{ needs.infrastructure.result }}"
        echo "Integration: ${{ needs.integration.result }}"
        
        # Required jobs for deployment
        if [[ "${{ needs.quality.result }}" == "success" && 
              "${{ needs.build-test.result }}" == "success" && 
              "${{ needs.infrastructure.result }}" == "success" ]]; then
          echo "✅ Core pipeline passed - Ready for deployment"
          
          # Check integration tests (only run on main)
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ "${{ needs.integration.result }}" == "success" ]]; then
              echo "✅ Integration tests passed"
            else
              echo "⚠️ Integration tests failed but core functionality verified"
            fi
          fi
          
          echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
        else
          echo "❌ Core pipeline failed - Deployment blocked"
          echo "DEPLOYMENT_READY=false" >> $GITHUB_ENV
          exit 1
        fi
        
    - name: Deployment status
      run: |
        if [[ "${{ env.DEPLOYMENT_READY }}" == "true" ]]; then
          echo "🚀 Pipeline completed successfully"
          echo "📦 Build artifacts are ready for deployment"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "🌐 Production deployment can proceed"
          fi
        fi