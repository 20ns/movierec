name: CI Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  
jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      continue-on-error: false
      
    - name: Check code formatting
      run: npm run format:check
      continue-on-error: true
      
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        test-type: [unit, api, aws]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install test dependencies
      run: cd tests && npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: cd tests && npm run test:simple
      
    - name: Run API tests
      if: matrix.test-type == 'api'
      run: cd tests && npm run test:simple
      env:
        REACT_APP_API_GATEWAY_INVOKE_URL: ${{ secrets.REACT_APP_API_GATEWAY_INVOKE_URL }}
        
    - name: Run AWS integration tests
      if: matrix.test-type == 'aws'
      run: npm run test:aws
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test-type }}
        path: tests/coverage/
        retention-days: 7

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [code-quality, build-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build
      
    - name: Verify build output
      run: |
        if [ ! -d "dist" ]; then
          echo "Build output directory not found"
          exit 1
        fi
        if [ ! -f "dist/index.html" ]; then
          echo "Main HTML file not found in build output"
          exit 1
        fi
        echo "Build verification successful"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install CDK dependencies
      run: cd infrastructure && npm ci
      
    - name: CDK Synth
      run: cd infrastructure && npx cdk synth
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        
    - name: Run infrastructure tests
      run: cd infrastructure && npm test

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [code-quality, build-test, build-verification, infrastructure-validation, security-scan]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.code-quality.result }}" == "success" && 
              "${{ needs.build-test.result }}" == "success" && 
              "${{ needs.build-verification.result }}" == "success" && 
              "${{ needs.infrastructure-validation.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
          echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
        else
          echo "❌ CI checks failed"
          echo "DEPLOYMENT_READY=false" >> $GITHUB_ENV
          exit 1
        fi
        
    - name: Notify deployment readiness
      run: |
        echo "Deployment readiness: ${{ env.DEPLOYMENT_READY }}"
        if [[ "${{ env.DEPLOYMENT_READY }}" == "true" ]]; then
          echo "🚀 Ready for deployment to staging/production"
        fi