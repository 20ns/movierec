name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PRODUCTION_DOMAIN: 'movierec.net'
  AWS_REGION: 'eu-north-1'

jobs:
  pre-deployment-validation:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      deployment-approved: ${{ steps.validation.outputs.approved }}
      previous-commit: ${{ steps.version.outputs.previous }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Get previous commit for rollback reference
      id: version
      run: |
        PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
        echo "previous=$PREVIOUS_COMMIT" >> $GITHUB_OUTPUT
        echo "Previous commit for reference: $PREVIOUS_COMMIT"
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run basic tests
      if: github.event.inputs.skip_tests != 'true'
      run: |
        echo "üß™ Running basic test suite..."
        npm run build
        echo "‚úÖ Build completed successfully"
      continue-on-error: true
        
    - name: Security audit
      id: security
      run: |
        echo "üîí Running security audit..."
        npm audit --audit-level=moderate
      continue-on-error: true
        
    - name: Validate CORS configuration
      id: cors-validation
      run: |
        echo "üåê Running CORS configuration validation..."
        node scripts/validate-cors.js
        echo "‚úÖ CORS validation passed"
        
    - name: Run Critical Production Tests
      id: production-tests
      run: |
        echo "üß™ Running critical production health tests..."
        cd tests
        npm ci
        npm run test:critical
        echo "‚úÖ Production health tests passed"
        
    - name: Validate deployment
      id: validation
      run: |
        echo "approved=true" >> $GITHUB_OUTPUT
        echo "‚úÖ Deployment approved"

  record-deployment-state:
    name: Record Current State
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.deployment-approved == 'true'
    outputs:
      deployment-timestamp: ${{ steps.timestamp.outputs.value }}
    
    steps:
    - name: Record deployment timestamp
      id: timestamp
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        echo "value=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "Deployment timestamp: $TIMESTAMP"
        
    - name: Record current production state
      run: |
        echo "üìã Recording current production state for rollback reference..."
        echo "üîó Current production: https://${{ env.PRODUCTION_DOMAIN }}"
        echo "üìÖ Deployment time: $(date)"
        echo "üÜî Previous commit: ${{ needs.pre-deployment-validation.outputs.previous-commit }}"
        echo "üîÑ This information can be used for manual rollback if needed"

  deploy-infrastructure:
    name: Deploy Production Infrastructure
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, record-deployment-state]
    if: needs.pre-deployment-validation.outputs.deployment-approved == 'true'
    outputs:
      api-url: ${{ steps.api-url.outputs.url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install CDK dependencies
      run: cd infrastructure && npm ci
      
    - name: Prepare Lambda functions with shared code
      run: cd infrastructure && npm run pre-deploy
      
    - name: Ensure JWT layer dependencies
      run: |
        echo "üì¶ Ensuring JWT layer dependencies are installed..."
        
        # Create JWT layer structure if it doesn't exist
        JWT_DIR="lambda-layers/jwt/nodejs"
        if [ ! -d "$JWT_DIR" ]; then
          echo "üèóÔ∏è Creating JWT layer structure..."
          mkdir -p "$JWT_DIR"
          cat > "$JWT_DIR/package.json" << 'EOF'
        {
          "name": "jwt-layer",
          "version": "1.0.0",
          "description": "JWT verification layer for Lambda functions",
          "dependencies": {
            "aws-jwt-verify": "^4.0.1"
          }
        }
        EOF
        fi
        
        # Install dependencies if missing
        if [ ! -d "$JWT_DIR/node_modules" ] || [ ! -d "$JWT_DIR/node_modules/aws-jwt-verify" ]; then
          echo "üîß Installing JWT layer dependencies..."
          cd "$JWT_DIR"
          npm install
          cd -
          echo "‚úÖ JWT layer dependencies installed"
        else
          echo "‚úÖ JWT layer dependencies already present"
        fi
      
    - name: Validate CORS after preparation
      run: |
        echo "üîç Validating CORS configuration after Lambda preparation..."
        node scripts/validate-cors.js
        echo "‚úÖ CORS validation passed after preparation"
      
    - name: Preview infrastructure changes
      run: |
        echo "üìã Previewing infrastructure changes..."
        cd infrastructure && npx cdk diff
        
    - name: Deploy production infrastructure
      run: |
        echo "üèóÔ∏è Deploying infrastructure..."
        cd infrastructure && npm run deploy:production
      env:
        CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
        
    - name: Get API Gateway URL
      id: api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name InfrastructureStack \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text)
        echo "url=$API_URL" >> $GITHUB_OUTPUT
        echo "Production API URL: $API_URL"
        
    - name: Verify infrastructure health
      run: |
        echo "üîç Verifying infrastructure..."
        API_URL="${{ steps.api-url.outputs.url }}"
        
        # Test API Gateway health
        curl -f "$API_URL/health" || echo "Health endpoint not available yet"
        
        # Verify DynamoDB tables
        aws dynamodb list-tables --output table
        
        # Verify Lambda functions
        aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `MovieRec`)].FunctionName' --output table

  wait-for-amplify-deployment:
    name: Wait for Amplify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    outputs:
      amplify-status: ${{ steps.amplify-check.outputs.status }}
    
    steps:
    - name: Wait for Amplify auto-deployment
      run: |
        echo "‚è≥ Waiting for Amplify to detect and deploy the main branch changes..."
        echo "üïê Amplify typically takes 3-5 minutes to build and deploy"
        echo "üìç Monitor progress at: https://console.aws.amazon.com/amplify/"
        
        # Wait for Amplify deployment
        sleep 300  # Wait 5 minutes
        
    - name: Check Amplify deployment status
      id: amplify-check
      run: |
        echo "üîç Checking if Amplify deployment completed..."
        
        # Try to access the site
        if curl -f "https://${{ env.PRODUCTION_DOMAIN }}" --max-time 10 2>/dev/null; then
          echo "‚úÖ Production site is responding"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Production site not responding yet - this may be normal"
          echo "üîß Check Amplify console for build status"
          echo "status=pending" >> $GITHUB_OUTPUT
        fi

  post-deployment-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, wait-for-amplify-deployment]
    outputs:
      health-status: ${{ steps.health.outputs.status }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Extended wait for full deployment propagation
      run: |
        echo "‚è≥ Additional wait for full deployment propagation..."
        sleep 120  # Additional 2 minutes
        
    - name: Comprehensive health checks
      id: health
      run: |
        echo "üîç Running comprehensive health checks..."
        
        # API health check
        echo "Testing API..."
        API_URL="${{ needs.deploy-infrastructure.outputs.api-url }}"
        
        if curl -f "$API_URL/health" --max-time 15; then
          echo "‚úÖ API health check passed"
          API_HEALTHY=true
        else
          echo "‚ùå API health check failed"
          API_HEALTHY=false
        fi
        
        # Frontend health check
        echo "Testing frontend..."
        if curl -f "https://${{ env.PRODUCTION_DOMAIN }}" --max-time 15; then
          echo "‚úÖ Frontend accessible"
          FRONTEND_HEALTHY=true
          
          # Test manifest
          if curl -f "https://${{ env.PRODUCTION_DOMAIN }}/manifest.json" --max-time 10; then
            echo "‚úÖ Manifest accessible"
          else
            echo "‚ö†Ô∏è Manifest not accessible"
          fi
        else
          echo "‚ùå Frontend not accessible"
          FRONTEND_HEALTHY=false
        fi
        
        # CORS check
        echo "Testing CORS..."
        if curl -f -X OPTIONS "$API_URL/recommendations" \
          -H "Origin: https://${{ env.PRODUCTION_DOMAIN }}" \
          -H "Access-Control-Request-Method: GET" --max-time 10; then
          echo "‚úÖ CORS configured correctly"
        else
          echo "‚ö†Ô∏è CORS check failed"
        fi
        
        # Comprehensive CORS validation
        echo "Running comprehensive CORS validation..."
        if node scripts/validate-cors.js; then
          echo "‚úÖ Comprehensive CORS validation passed"
        else
          echo "‚ö†Ô∏è Comprehensive CORS validation failed"
        fi
        
        # Overall health determination
        if [[ "$API_HEALTHY" == "true" && "$FRONTEND_HEALTHY" == "true" ]]; then
          echo "status=healthy" >> $GITHUB_OUTPUT
          echo "‚úÖ Overall system health: HEALTHY"
        elif [[ "$API_HEALTHY" == "true" ]]; then
          echo "status=degraded" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Overall system health: DEGRADED (API OK, Frontend issues)"
        else
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          echo "‚ùå Overall system health: UNHEALTHY"
        fi
        
    - name: Performance verification
      run: |
        echo "üìä Performance verification..."
        if curl -f "https://${{ env.PRODUCTION_DOMAIN }}" --max-time 15 2>/dev/null; then
          curl -w "@-" -o /dev/null -s "https://${{ env.PRODUCTION_DOMAIN }}" <<'EOF'
        Production Performance:
        - DNS Lookup: %{time_namelookup}s
        - Connect: %{time_connect}s  
        - SSL Handshake: %{time_appconnect}s
        - First Byte: %{time_starttransfer}s
        - Total: %{time_total}s
        - Size: %{size_download} bytes
        EOF
        else
          echo "‚ö†Ô∏è Performance test skipped - site not accessible"
        fi
        
    - name: Basic API test
      run: |
        echo "üß™ Basic API availability test..."
        API_URL="${{ needs.deploy-infrastructure.outputs.api-url }}"
        if curl -f "$API_URL/health" --max-time 10; then
          echo "‚úÖ API is responding"
        else
          echo "‚ö†Ô∏è API test skipped - health endpoint not available"
        fi
      continue-on-error: true
      
    - name: Verify No 502 Errors Post-Deployment
      run: |
        echo "üîç Verifying deployment fixed 502 errors..."
        cd tests
        npm run test:production || echo "‚ö†Ô∏è Production tests failed - check deployment"
      continue-on-error: true

  deployment-result:
    name: Deployment Result
    runs-on: ubuntu-latest
    needs: [post-deployment-verification, wait-for-amplify-deployment, deploy-infrastructure]
    if: always()
    
    steps:
    - name: Determine deployment outcome
      run: |
        HEALTH_STATUS="${{ needs.post-deployment-verification.outputs.health-status }}"
        AMPLIFY_STATUS="${{ needs.wait-for-amplify-deployment.outputs.amplify-status }}"
        
        echo "üîç Deployment Analysis:"
        echo "- Infrastructure: ${{ needs.deploy-infrastructure.result }}"
        echo "- Health Status: $HEALTH_STATUS"
        echo "- Amplify Status: $AMPLIFY_STATUS"
        
        if [[ "${{ needs.deploy-infrastructure.result }}" == "success" && 
              ("$HEALTH_STATUS" == "healthy" || "$HEALTH_STATUS" == "degraded") ]]; then
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "‚úÖ Production deployment completed"
          echo "üåê Site: https://${{ env.PRODUCTION_DOMAIN }}"
          echo "üîó API: ${{ needs.deploy-infrastructure.outputs.api-url }}"
          
          if [[ "$HEALTH_STATUS" == "degraded" ]]; then
            echo "‚ö†Ô∏è Note: Some frontend issues detected - monitor closely"
          fi
          
        elif [[ "${{ needs.deploy-infrastructure.result }}" == "success" ]]; then
          echo "‚ö†Ô∏è PARTIAL DEPLOYMENT"
          echo "‚úÖ Infrastructure deployed successfully"
          echo "‚ö†Ô∏è Health checks indicate issues"
          echo "üîß Manual verification recommended"
          
        else
          echo "‚ùå DEPLOYMENT FAILED"
          echo "‚ùå Infrastructure deployment failed"
          echo "üîÑ Consider manual rollback if needed"
          exit 1
        fi
        
    - name: Create deployment summary
      run: |
        HEALTH_STATUS="${{ needs.post-deployment-verification.outputs.health-status }}"
        
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## üöÄ Production Deployment Summary
        
        **Status:** ${{ needs.deploy-infrastructure.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
        **Health:** $HEALTH_STATUS
        **Environment:** Production
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        **Deployed:** $(date)
        
        ### üîó Production Links
        - **Website:** https://${{ env.PRODUCTION_DOMAIN }}
        - **API:** ${{ needs.deploy-infrastructure.outputs.api-url }}
        - **Amplify Console:** [Monitor Builds](https://console.aws.amazon.com/amplify/)
        
        ### üìä Deployment Steps
        - **Infrastructure:** ${{ needs.deploy-infrastructure.result }}
        - **Amplify Wait:** ${{ needs.wait-for-amplify-deployment.result }}
        - **Health Checks:** ${{ needs.post-deployment-verification.result }}
        
        ### üéØ Deployment Details
        - Infrastructure changes deployed via CDK
        - Frontend deployed automatically via AWS Amplify
        - Health monitoring and verification completed
        - Performance metrics captured
        
        ### üìã Post-Deployment Actions
        $( [[ "$HEALTH_STATUS" == "healthy" ]] && echo "‚úÖ No action required - system healthy" || echo "üîß Monitor system closely and check Amplify console" )
        
        ### üîÑ Rollback Information
        If rollback is needed:
        1. Revert infrastructure: \`git checkout HEAD~1 && cd infrastructure && npx cdk deploy\`
        2. Revert frontend: Use Amplify console to redeploy previous successful build
        
        Your production site is live! üéâ
        EOF
        
    - name: Final status check
      run: |
        if [[ "${{ needs.deploy-infrastructure.result }}" == "success" ]]; then
          echo "üöÄ Deployment process completed successfully!"
          exit 0
        else
          echo "‚ùå Deployment failed"
          exit 1
        fi